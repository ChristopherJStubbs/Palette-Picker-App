{"ast":null,"code":"var _jsxFileName = \"/Users/chrisstubbs/Desktop/Colt-Steele-React/colors-app/src/PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass PaletteMetaForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.changeStage = () => {\n      this.setState({\n        stage: \"emoji\"\n      });\n    };\n\n    this.savePalette = emoji => {\n      const newPalette = {\n        paletteName: this.state.newPaletteName,\n        emoji: emoji.native\n      };\n      this.props.handleSubmit(newPalette);\n      this.setState({\n        stage: \"\"\n      });\n    };\n\n    this.state = {\n      stage: 'form',\n      newPaletteName: ''\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isPaletteNameUnique', value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  render() {\n    const _this$state = this.state,\n          newPaletteName = _this$state.newPaletteName,\n          stage = _this$state.stage;\n    const closeForm = this.props.closeForm;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      open: stage === \"emoji\",\n      onClose: closeForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Pick an emoji for your palette\"), React.createElement(Picker, {\n      onSelect: this.savePalette,\n      title: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      open: stage === \"form\" // onClose={this.handleClose}\n      ,\n      \"aria-labelledby\": \"form-dialog-title\",\n      onClose: closeForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Choose a Palette Name\"), React.createElement(ValidatorForm, {\n      onSubmit: this.changeStage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Please enter a unique name for you palette and save.\"), React.createElement(TextValidator, {\n      label: \"Palette Name\",\n      value: newPaletteName,\n      name: \"newPaletteName\",\n      onChange: this.handleChange,\n      fullWidth: true,\n      margin: \"normal\",\n      validators: ['required', 'isPaletteNameUnique'],\n      errorMessages: ['You must give your palette a name', 'This palette name already exists!'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: closeForm,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Save Palette\")))));\n  }\n\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/chrisstubbs/Desktop/Colt-Steele-React/colors-app/src/PaletteMetaForm.js"],"names":["React","Component","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","constructor","props","handleChange","e","setState","target","name","value","handleClickOpen","open","handleClose","changeStage","stage","savePalette","emoji","newPalette","paletteName","state","newPaletteName","native","handleSubmit","componentDidMount","addValidationRule","palettes","every","toLowerCase","render","closeForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport {Picker} from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass PaletteMetaForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stage: 'form',\n            newPaletteName: ''\n        }\n    }\n\n    componentDidMount() {\n        ValidatorForm.addValidationRule('isPaletteNameUnique', value =>\n            this.props.palettes.every(\n                ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n            )\n        );\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleClickOpen = () => {\n        this.setState({\n            open: true\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            open: false\n        });\n    }\n\n    changeStage = () => {\n        this.setState({\n            stage: \"emoji\"\n        })\n    }\n\n    savePalette = (emoji) => {\n        const newPalette = {\n            paletteName: this.state.newPaletteName,\n            emoji: emoji.native\n        }\n        this.props.handleSubmit(newPalette);\n        this.setState({\n            stage: \"\"\n        });\n    }\n\n    render() {\n        const { newPaletteName, stage } = this.state;\n        const { closeForm } = this.props;\n        return (\n            <div>\n                <Dialog\n                    open={stage === \"emoji\"}\n                    onClose={closeForm}\n                >\n                    <DialogTitle id=\"form-dialog-title\">Pick an emoji for your palette</DialogTitle>\n                    <Picker\n                        onSelect={this.savePalette}\n                        title=\"\"\n                    />\n                </Dialog>\n                <Dialog\n                    open={stage === \"form\"}\n                    // onClose={this.handleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                    onClose={closeForm}\n                >\n                    <DialogTitle id=\"form-dialog-title\">Choose a Palette Name</DialogTitle>\n                    <ValidatorForm onSubmit={this.changeStage}>\n                        <DialogContent>\n                            <DialogContentText>\n                                Please enter a unique name for you palette and save.\n                            </DialogContentText>\n                            <TextValidator\n                                label=\"Palette Name\"\n                                value={newPaletteName}\n                                name='newPaletteName'\n                                onChange={this.handleChange}\n                                fullWidth\n                                margin='normal'\n                                validators={[\n                                    'required',\n                                    'isPaletteNameUnique'\n                                ]}\n                                errorMessages={[\n                                    'You must give your palette a name',\n                                    'This palette name already exists!'\n                                ]}\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={closeForm} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button\n                                variant='contained'\n                                type='submit'\n                                color='primary'\n                            >\n                                Save Palette\n                            </Button>\n                        </DialogActions>\n                    </ValidatorForm>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default PaletteMetaForm;\n"]},"metadata":{},"sourceType":"module"}