{"ast":null,"code":"var _jsxFileName = \"/Users/chrisstubbs/Desktop/Colt-Steele-React/colors-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport { arrayMove } from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\nimport seedColors from './seedColors';\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.addNewColor = newColor => {\n      this.setState({\n        colors: [...this.state.colors, newColor],\n        newColorName: ''\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = newPalette => {\n      newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n      newPalette.colors = this.state.colors;\n      this.props.savePalette(newPalette);\n      this.props.history.push('/');\n    };\n\n    this.handleDelete = colorName => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.clearColors = () => {\n      this.setState({\n        colors: []\n      });\n    };\n\n    this.addRandom = () => {\n      const allColors = this.props.palettes.map(p => p.colors).flat();\n      let rand;\n      let randomColor;\n      let isSameColor = true;\n\n      while (isSameColor) {\n        rand = Math.floor(Math.random() * allColors.length);\n        randomColor = allColors[rand];\n        isSameColor = this.state.colors.some(color => color.name === randomColor.name);\n      }\n\n      this.setState({\n        colors: [...this.state.colors, randomColor]\n      });\n    };\n\n    this.state = {\n      open: true,\n      newPaletteName: '',\n      colors: seedColors[0].colors\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          maxColors = _this$props.maxColors,\n          palettes = _this$props.palettes;\n    const _this$state = this.state,\n          open = _this$state.open,\n          colors = _this$state.colors;\n    const paletteFull = colors.length >= maxColors;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(PaletteFormNav, {\n      open: open,\n      palettes: palettes,\n      handleSubmit: this.handleSubmit,\n      handleDrawerOpen: this.handleDrawerOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Drawer, {\n      className: classes.drawer,\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: open,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Pick Your Color\"), React.createElement(\"div\", {\n      className: classes.buttons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: this.clearColors,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Clear Palette\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.addRandom,\n      className: classes.button,\n      disabled: paletteFull,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Random Color\")), React.createElement(ColorPickerForm, {\n      paletteFull: paletteFull,\n      addNewColor: this.addNewColor,\n      colors: this.state.colors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))), React.createElement(\"main\", {\n      className: classNames(classes.content, {\n        [classes.contentShift]: open\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(DraggableColorList, {\n      colors: colors,\n      handleDelete: this.handleDelete,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      distance: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })));\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/chrisstubbs/Desktop/Colt-Steele-React/colors-app/src/NewPaletteForm.js"],"names":["React","Component","PaletteFormNav","ColorPickerForm","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","arrayMove","styles","seedColors","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","addNewColor","newColor","colors","state","newColorName","handleChange","e","target","name","value","handleSubmit","newPalette","id","paletteName","toLowerCase","replace","savePalette","history","push","handleDelete","colorName","filter","color","onSortEnd","oldIndex","newIndex","clearColors","addRandom","allColors","palettes","map","p","flat","rand","randomColor","isSameColor","Math","floor","random","length","some","newPaletteName","render","classes","maxColors","paletteFull","root","drawer","paper","drawerPaper","drawerHeader","container","buttons","button","content","contentShift","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport classNames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport DraggableColorList from './DraggableColorList';\nimport {arrayMove} from 'react-sortable-hoc';\nimport styles from './styles/NewPaletteFormStyles';\nimport seedColors from './seedColors';\n\nclass NewPaletteForm extends Component {\n    static defaultProps = {\n        maxColors: 20\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: true,\n            newPaletteName: '',\n            colors: seedColors[0].colors\n        }\n    }\n\n    handleDrawerOpen = () => {\n      this.setState({ open: true });\n    };\n\n    handleDrawerClose = () => {\n      this.setState({ open: false });\n    };\n\n    addNewColor = (newColor) => {\n        this.setState({\n            colors: [...this.state.colors, newColor], newColorName: ''\n        });\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = (newPalette) => {\n        newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, \"-\");\n        newPalette.colors = this.state.colors;\n        this.props.savePalette(newPalette);\n        this.props.history.push('/');\n    }\n\n    handleDelete = (colorName) => {\n        this.setState({\n            colors: this.state.colors.filter(color => color.name !== colorName)\n        });\n    }\n\n    onSortEnd = ({oldIndex, newIndex}) => {\n        this.setState(({colors}) => ({\n            colors: arrayMove(colors, oldIndex, newIndex),\n        }));\n    };\n\n    clearColors = () => {\n        this.setState({\n            colors: []\n        });\n    }\n\n    addRandom = () => {\n        const allColors = this.props.palettes.map(p => p.colors).flat();\n        let rand;\n        let randomColor;\n        let isSameColor = true;\n        while (isSameColor) {\n            rand = Math.floor(Math.random() * allColors.length);\n            randomColor = allColors[rand];\n            isSameColor = this.state.colors.some(color => color.name === randomColor.name);\n        }\n        this.setState({\n            colors: [...this.state.colors, randomColor]\n        });\n    }\n\n    render() {\n        const { classes, maxColors, palettes } = this.props;\n        const { open, colors } = this.state;\n        const paletteFull = colors.length >= maxColors;\n\n        return (\n            <div className={classes.root}>\n                <PaletteFormNav\n                    open={open}\n                    palettes={palettes}\n                    handleSubmit={this.handleSubmit}\n                    handleDrawerOpen={this.handleDrawerOpen}\n                />\n                <Drawer\n                    className={classes.drawer}\n                    variant=\"persistent\"\n                    anchor=\"left\"\n                    open={open}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <div className={classes.drawerHeader}>\n                        <IconButton onClick={this.handleDrawerClose}>\n                            <ChevronLeftIcon />\n                        </IconButton>\n                    </div>\n                    <Divider />\n                    <div className={classes.container}>\n                        <Typography variant=\"h4\" gutterBottom >\n                            Pick Your Color\n                        </Typography>\n                        <div className={classes.buttons} >\n                            <Button\n                                variant='contained'\n                                color='secondary'\n                                onClick={this.clearColors}\n                                className={classes.button}\n                            >\n                                Clear Palette\n                            </Button>\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                onClick={this.addRandom}\n                                className={classes.button}\n                                disabled={paletteFull}\n                                >\n                                    Random Color\n                            </Button>\n                        </div>\n                        <ColorPickerForm\n                            paletteFull={paletteFull}\n                            addNewColor={this.addNewColor}\n                            colors={this.state.colors}\n                        />\n                    </div>\n                </Drawer>\n                <main\n                    className={classNames(classes.content, {\n                        [classes.contentShift]: open,\n                    })}\n                >\n                    <div className={classes.drawerHeader} />\n                        <DraggableColorList\n                            colors={colors}\n                            handleDelete={this.handleDelete}\n                            axis='xy'\n                            onSortEnd={this.onSortEnd}\n                            distance={5}\n                        />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);\n"]},"metadata":{},"sourceType":"module"}