{"ast":null,"code":"var _jsxFileName = \"/Users/chrisstubbs/Desktop/Colt-Steele-React/colors-app/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport styles from './styles/ColorPickerFormStyles';\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCurrentColor = newColor => {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      const newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.props.addNewColor(newColor);\n      this.setState({\n        newColorName: ''\n      });\n    };\n\n    this.state = {\n      currentColor: 'blue',\n      newColorName: ''\n    };\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule('isColorNameUnique', value => this.props.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule('isColorUnique', value => this.props.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  render() {\n    const _this$props = this.props,\n          paletteFull = _this$props.paletteFull,\n          classes = _this$props.classes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: this.state.currentColor,\n      onChangeComplete: this.updateCurrentColor,\n      className: classes.picker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      ref: \"form\",\n      instantValidate: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      margin: \"normal\",\n      variant: \"filled\",\n      placeholder: \"Type Color Name\",\n      className: classes.colorNameInput,\n      value: this.state.newColorName,\n      name: \"newColorName\",\n      onChange: this.handleChange,\n      validators: ['required', 'isColorNameUnique', 'isColorUnique'],\n      errorMessages: ['You must give the color a name', 'Color Name must be unique', 'You already have this color'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(Button, {\n      className: classes.addColor,\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      disabled: paletteFull,\n      style: {\n        backgroundColor: paletteFull ? \"grey\" : this.state.currentColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, paletteFull ? 'Palette Full' : 'Add Color')));\n  }\n\n}\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/Users/chrisstubbs/Desktop/Colt-Steele-React/colors-app/src/ColorPickerForm.js"],"names":["React","Component","Button","withStyles","ValidatorForm","TextValidator","ChromePicker","styles","ColorPickerForm","constructor","props","updateCurrentColor","newColor","setState","currentColor","hex","handleChange","e","target","name","value","handleSubmit","color","state","newColorName","addNewColor","componentDidMount","addValidationRule","colors","every","toLowerCase","render","paletteFull","classes","picker","colorNameInput","addColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { ChromePicker } from 'react-color';\nimport styles from './styles/ColorPickerFormStyles';\n\nclass ColorPickerForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentColor: 'blue',\n            newColorName: '',\n        }\n    }\n\n    componentDidMount() {\n        ValidatorForm.addValidationRule('isColorNameUnique', value =>\n            this.props.colors.every(\n                ({ name }) => name.toLowerCase() !== value.toLowerCase()\n            )\n        );\n        ValidatorForm.addValidationRule('isColorUnique', value =>\n            this.props.colors.every(\n                ({ color }) => color !== this.state.currentColor\n            )\n        );\n    }\n\n    updateCurrentColor = (newColor) => {\n        this.setState({\n            currentColor: newColor.hex\n        });\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = () => {\n        const newColor = {\n            color: this.state.currentColor,\n            name: this.state.newColorName\n        };\n        this.props.addNewColor(newColor);\n        this.setState({\n            newColorName: ''\n        });\n    }\n\n    render() {\n        const { paletteFull, classes } = this.props;\n        return (\n            <div>\n                <ChromePicker\n                    color={this.state.currentColor}\n                    onChangeComplete={this.updateCurrentColor}\n                    className={classes.picker}\n                />\n                <ValidatorForm onSubmit={this.handleSubmit} ref='form' instantValidate={false}>\n                    <TextValidator\n                        margin='normal'\n                        variant='filled'\n                        placeholder=\"Type Color Name\"\n                        className={classes.colorNameInput}\n                        value={this.state.newColorName}\n                        name='newColorName'\n                        onChange={this.handleChange}\n                        validators={[\n                            'required',\n                            'isColorNameUnique',\n                            'isColorUnique'\n                        ]}\n                        errorMessages={[\n                            'You must give the color a name',\n                            'Color Name must be unique',\n                            'You already have this color'\n                        ]}\n                    />\n                    <Button\n                        className={classes.addColor}\n                        variant='contained'\n                        type='submit'\n                        color='primary'\n                        disabled={paletteFull}\n                        style={{ backgroundColor: paletteFull ? \"grey\" : this.state.currentColor }}\n                        >\n                            {paletteFull ? 'Palette Full' : 'Add Color'}\n                        </Button>\n                </ValidatorForm>\n            </div>\n        );\n    }\n\n}\n\nexport default withStyles(styles)(ColorPickerForm);\n"]},"metadata":{},"sourceType":"module"}